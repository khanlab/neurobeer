#!/usr/bin/env python
""" xfmData

Python command line interface for transforming data of clustered tractography to
new space

"""
def proc_cmd(cmd):
    procCmd = cmd.split(" ")

    return procCmd

def get_parser():
    """
    Argument Parser
    """
    from argparse import ArgumentParser, RawTextHelpFormatter
    from neurobeer._version import __version__

    parser = ArgumentParser(description=('Tracks scalar information to vtk '
                                         'polydata and returns text file'),
                            formatter_class=RawTextHelpFormatter)

    # Version option
    parser.add_argument('--version', action='version', version=__version__)

    # Required arguments
    g_req = parser.add_argument_group('required arguments')
    g_req.add_argument('in_tract', help='Clustered tractography to be '
                                        'transformed to copy data from. '
                                        'Provide full path')
    g_req.add_argument('xfm_tract', help='Transformed tractography to copy '
                                         'data to. Provide full path')

    # Optional arguments
    g_opt = parser.add_argument_group('control arguments')
    g_opt.add_argument('-p', action='store', type=int, metavar='no_samples',
                       default=2, help=('number of samples to take along each '
                                        'fiber'))
    g_opt.add_argument('-v', '--verbose', action='count', default=0,
                       help='verbosity of tool')

    return parser

def main():
    """
    Entry point of code
    """
    import os.path as op

    from neurobeer.tractography import cluster, fibers, prior, tractio, misc

    args = get_parser().parse_args()
    # Required inputs
    in_tract = args.in_tract
    xfm_tract = args.xfm_tract

    if not op.isfile(in_tract) or not op.isfile(xfm_tract):
        raise IOError("One of the provided tractography files is not found...")

    misc.vprint("Copying data over to transformed clustered tractography",
                args.verbose)

    # Load input tractography datas
    priorData, priorCentroids, priorLabels, _ = prior.load(in_tract,
                                                           verbose=args.verbose)
    colour = cluster._cluster_to_rgb(priorCentroids)

    xfmPolydata = tractio.readVTK(xfm_tract, args.verbose)
    xfmData = fibers.FiberTree()
    xfmData.convertFromVTK(xfmPolydata, priorData.pts_per_fiber, args.verbose)

    # Add cluster info
    xfmData.addClusterInfo(priorLabels, priorCentroids)

    # Save xfmed tractography with cluster info
    newData = xfmData.convertToVTK()
    newPolydata = cluster._format_outputVTK(newData, priorLabels, colour,
                                            priorCentroids)

    tractio.writeVTK(newPolydata, xfm_tract)


if __name__ == '__main__':
    main()
